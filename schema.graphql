### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Board {
  id: Int!
  lists: [List!]!
  title: String!
  users: [User!]!
}

type Card {
  description: String
  id: Int!
  insideList: [List]
  title: String!
}

type List {
  cards: [Card!]!
  id: Int!
  insideBoard: [Board]
  title: String!
}

type Mutation {
  assignUserstoBoard(id: Int!, userId: Int!): Board
  createBoard(title: String!): Board!
  createCardofList(description: String, listId: Int!, title: String!): [Board!]
  createList(boardId: Int!, title: String!): [Board!]
  deleteBoardById(id: Int!): Board
  deleteCardById(id: Int!): [Board]
  deleteListById(id: Int!): [Board]
  dragCard(id: Int!, listId: Int!): [Board]
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, firstName: String!, lastName: String!, password: String!): AuthPayload!
  updateCardDetails(description: String, id: Int!, title: String): [Board]
  updateListDetails(id: Int!, title: String!): [Board]
}

type Query {
  getAllBoards: [Board!]!
  getAllCards: [Card!]!
  getAllCardsOfList(listId: Int!): [Card!]!
  getAllLists: [List!]!
  getAllListsOfBoard(boardId: Int!): [List!]!
  getAllUsers: [User!]!
  getBoardsOfUser: [Board!]!
  getCardById(id: Int!): Card
  getListById(id: Int!): List
}

type User {
  boards: [Board!]!
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
}
