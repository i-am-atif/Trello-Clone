/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Board: { // root type
    id: number; // Int!
    title: string; // String!
  }
  Card: { // root type
    deadline: string; // String!
    description: string; // String!
    id: number; // Int!
    label: string; // String!
    title: string; // String!
  }
  List: { // root type
    id: number; // Int!
    title: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Board: { // field return type
    id: number; // Int!
    lists: NexusGenRootTypes['List'][]; // [List!]!
    title: string; // String!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Card: { // field return type
    createdBy: NexusGenRootTypes['User'] | null; // User
    deadline: string; // String!
    description: string; // String!
    id: number; // Int!
    insideList: NexusGenRootTypes['List'] | null; // List
    label: string; // String!
    title: string; // String!
  }
  List: { // field return type
    cards: NexusGenRootTypes['Card'][]; // [Card!]!
    id: number; // Int!
    insideBoard: NexusGenRootTypes['Board'] | null; // Board
    title: string; // String!
  }
  Mutation: { // field return type
    createBoard: NexusGenRootTypes['Board']; // Board!
    createCard: NexusGenRootTypes['Card']; // Card!
    createList: NexusGenRootTypes['List']; // List!
    deleteBoardById: NexusGenRootTypes['Board'] | null; // Board
    deleteCardById: NexusGenRootTypes['Card'] | null; // Card
    deleteListById: NexusGenRootTypes['List'] | null; // List
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    updateCardById: NexusGenRootTypes['Card'] | null; // Card
  }
  Query: { // field return type
    getAllCards: NexusGenRootTypes['Card'][]; // [Card!]!
    getAllCardsOfList: NexusGenRootTypes['Card'][]; // [Card!]!
    getAllCardsOfUser: NexusGenRootTypes['Card'][]; // [Card!]!
    getAllLists: NexusGenRootTypes['List'][]; // [List!]!
    getAllListsOfBoard: NexusGenRootTypes['List'][]; // [List!]!
    getCardById: NexusGenRootTypes['Card'] | null; // Card
    getListById: NexusGenRootTypes['List'] | null; // List
  }
  User: { // field return type
    boards: NexusGenRootTypes['Board'][]; // [Board!]!
    cards: NexusGenRootTypes['Card'][]; // [Card!]!
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Board: { // field return type name
    id: 'Int'
    lists: 'List'
    title: 'String'
    users: 'User'
  }
  Card: { // field return type name
    createdBy: 'User'
    deadline: 'String'
    description: 'String'
    id: 'Int'
    insideList: 'List'
    label: 'String'
    title: 'String'
  }
  List: { // field return type name
    cards: 'Card'
    id: 'Int'
    insideBoard: 'Board'
    title: 'String'
  }
  Mutation: { // field return type name
    createBoard: 'Board'
    createCard: 'Card'
    createList: 'List'
    deleteBoardById: 'Board'
    deleteCardById: 'Card'
    deleteListById: 'List'
    login: 'AuthPayload'
    signup: 'AuthPayload'
    updateCardById: 'Card'
  }
  Query: { // field return type name
    getAllCards: 'Card'
    getAllCardsOfList: 'Card'
    getAllCardsOfUser: 'Card'
    getAllLists: 'List'
    getAllListsOfBoard: 'List'
    getCardById: 'Card'
    getListById: 'List'
  }
  User: { // field return type name
    boards: 'Board'
    cards: 'Card'
    email: 'String'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createBoard: { // args
      title: string; // String!
    }
    createCard: { // args
      deadline: string; // String!
      description: string; // String!
      label: string; // String!
      title: string; // String!
    }
    createList: { // args
      title: string; // String!
    }
    deleteBoardById: { // args
      id: number; // Int!
    }
    deleteCardById: { // args
      id: number; // Int!
    }
    deleteListById: { // args
      id: number; // Int!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      password: string; // String!
    }
    updateCardById: { // args
      deadline?: string | null; // String
      description?: string | null; // String
      id: number; // Int!
      label?: string | null; // String
      title?: string | null; // String
    }
  }
  Query: {
    getAllCardsOfList: { // args
      insideListId: number; // Int!
    }
    getAllListsOfBoard: { // args
      boardId: number; // Int!
    }
    getCardById: { // args
      id: number; // Int!
    }
    getListById: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}